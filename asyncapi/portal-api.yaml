asyncapi: 2.5.0
id: 'https://github.com/veriflite/portal-api'
info:
    title: Veriflite Portal
    version: '0.1'
    description: |
        The Veriflite Portal allows developers direct access to Veriflite's Time of Flight data, to create custom applications on top of the Veriflite platform.

        The Portal uses websockets for communication and has three endpoints available: /raw, /flight, and /sensor. The /raw endpoint publishes unprocessed bounce data, while the /flight endpoint publishes processed data. The /sensor endpoint responds to requests for information about the active sensors.

        To get started you can use a tool such as websocat, available at https://github.com/vi/websocat, to connect to the endpoints. For example to observe raw bounce data, start the Veriflite app and go to Labs -> Portal; then on your PC, substituting for the IP address displayed in the Portal, run the following command and you should see a stream of bounce events depending on the activity on your trampoline:

            websocat ws://192.168.1.95:4651/raw

        There are also some simple example Python projects available at https://github.com/Veriflite/Portal-Demo that demonstrate how to receive Veriflite data.

        Please let us know if you're trying the Portal out, we are keen to hear how you get on!

    contact:
        "name": "John Howe"
        "email": "john@veriflite.com"
servers:
    device:
        url: 'ws://{ip}:4651'
        protocol: ws
        description: A websocket connection must be opened to the URI displayed by the Veriflite app.
        variables:
            ip:
                description: |
                    The IP address of the device running the Veriflite app.
channels:
    /raw:
        subscribe:
            description: |
                Open a connection to the /raw endpoint to receive unprocessed bounce events in the form of landing and depart timestamps.
            message:
                $ref: '#/components/messages/packet'
    /flight:
        description: Processed bounce events.
        subscribe:
            description: |
                Receive processed bounce data from the Veriflite sensors as it arrives at the app.
            message:
                oneOf:
                    - $ref: '#/components/messages/bounce'
                    - $ref: '#/components/messages/idle'
                    - $ref: '#/components/messages/sensor-reset'
                    - $ref: '#/components/messages/missing-data'
    /sensor:
        description: Request sensor data and receive sensor events.
        publish:
            description: |
                Request information about the Veriflite sensors known by the app.
            message:
                oneOf:
                    - $ref: '#/components/messages/sensor-request'
                    - $ref: '#/components/messages/sensor-data'
        subscribe:
            description: |
                Receive information about the Veriflite sensors known by the app.
            message:
                oneOf:
                    - $ref: '#/components/messages/error'
                    - $ref: '#/components/messages/sensor-list'
                    - $ref: '#/components/messages/sensor-details'
                    - $ref: '#/components/messages/battery'
                    - $ref: '#/components/messages/status-flags'
                    - $ref: '#/components/messages/display-name'
components:
    messages:
        error:
            name: error
            description: |
                Event exposing errors with the socket connection, requests or responses.
            contentType: application/json
            payload:
                $ref: '#/components/schemas/error'
        packet:
            name: packet
            description: |
                Minimally processed live data from the Veriflite sensors as received by the app.
            contentType: application/json
            payload:
                $ref: '#/components/schemas/packet'
        bounce:
            name: bounce
            description: |
                Live individual bounce data after processing in the Veriflite app. This event may be a new bounce, an update to an already received bounce or indicate an existing bounce has been found invalid and should be discarded.
            contentType: application/json
            payload:
                $ref: '#/components/schemas/bounce'
        idle:
            name: idle
            summary: Event signalling that a Veriflite sensor has gone idle.
            contentType: application/json
            payload:
                $ref: '#/components/schemas/idle'
        sensor-reset:
            name: sensor-reset
            description: |
                Event indicating that at least one of the Veriflite sensors connected to the application has disconnected or reset. Expect sequence numbers following this to reset and caches to be discarded (there will be no updates to past jumps on missing data received).
            payload:
                $ref: '#/components/schemas/sensor-reset'
        missing-data:
            name: missing-data
            description: |
                Event indicating that there are packets that were expected from the app that have either not arrived - meaning that jump data is unreliable, or that previously missing packets have arrived.
            contentType: application/json
            payload:
                $ref: '#/components/schemas/missing-data'
        sensor-request:
            name: sensor-request
            description: |
                Request a list of the sensors known to the app. This consists of sensors that are either currently active or have been active since the Portal was started on the app.

                This query will prompt a sensor-list response.
            contentType: application/json
            payload:
                $ref: '#/components/schemas/sensor-request'
        sensor-data:
            name: sensor-data
            description: |
                Request a summary of what the application knows about a specific sensor.

                This query will prompt a sensor-details response.
            contentType: application/json
            payload:
                $ref: '#/components/schemas/sensor-data'
        sensor-list:
            name: sensor-list
            description: |
                A list of the sensors known to the app. This consists of sensors that are either currently active or have been active since the Portal was started on the app.

                This is a response to the sensor-list query.
            contentType: application/json
            payload:
                $ref: '#/components/schemas/sensor-list'
        sensor-details:
            name: sensor-details
            description: |
                A summary of what the app knows about a specific sensor.

                This is a response to the sensor-list query.
            contentType: application/json
            payload:
                $ref: '#/components/schemas/sensor-details'
        battery:
            name: battery
            summary: Current sensor battery level (mV)
            contentType: application/json
            payload:
                $ref: '#/components/schemas/battery'
        status-flags:
            name: status-flags
            description: |
                Status flags received from a sensor providing firmware information.
            contentType: application/json
            payload:
                $ref: '#/components/schemas/status-flags'
        display-name:
            name: display-name
            description: |
                Event indicating that a sensor has sent the user-friendly display name given to it.
            contentType: application/json
            payload:
                $ref: '#/components/schemas/display-name'
    schemas:
        error:
            type: object
            properties:
                event:
                    type: string
                    description: error
                    const: error
                data:
                    $ref: '#/components/schemas/errorData'
        errorData:
            type: object
            properties:
                error:
                    type: string
                    description: Type of error
                message:
                    description: Short description of the error
                    type: string
            examples:
                - error: InvalidArgument
                  message: Could not find a sensor with the address "90:FD:9F:AC:9B:7F", request sensor-list for known sensors.
        packet:
            type: object
            properties:
                event:
                    type: string
                    description: packet
                    const: packet
                data:
                    $ref: '#/components/schemas/packetData'
        packetData:
            type: object
            properties:
                address:
                    type: string
                    description: Unique sensor identifier.
                sequenceNumber:
                    type: integer
                    description: Used to determine the order in which the packets were generated by the sensor.
                type:
                    type: string
                    description: Sensor event described in this packet. The _SYNC suffix indicates that the sensor has synchronised its clock with another sensor, and the timestamp values may be used for calculating a synchro score, whereas the _TIME suffix indicates that it is not a synchronised value.
                    enum:
                        - IMPACT_SYNC
                        - IMPACT_TIME
                        - DEPART_SYNC
                        - DEPART_TIME
                        - IDLE_SYNC
                        - IDLE_TIME
                        - BATTERY_VOLTAGE
                data:
                    description: Sensor packet payload, either a timestamp (ms) or battery voltage (mV).
                    type: integer
            examples:
                - address: 90:FD:9F:AC:9B:7F
                  sequenceNumber: 11
                  type: IMPACT_TIME
                  data: 9072
        bounce:
            type: object
            properties:
                event:
                    type: string
                    description: bounce
                    const: bounce
                data:
                    $ref: '#/components/schemas/bounceData'
        bounceData:
            type: object
            properties:
                address:
                    type: string
                    description: Unique sensor identifier.
                sequenceNumber:
                    type: integer
                    description: The order of the bounce event relative to other events from the same sensor. This value corresponds to the sequence number of the IMPACT packet which ends the flight phase of the bounce. Note - This sequence will not be contiguous.
                timeOfFlight:
                    type: integer
                    description: Duration (ms) from DEPART to IMPACT event timestamps.
                toFDelta:
                    type: integer
                    description: Difference (ms) in timeOfFlight from the previous bounce.
                impactTimestamp:
                    type: integer
                    description: Timestamp (ms) of the IMPACT event which ends the flight phase.
                isInvalid:
                    type: boolean
                    description: Indicates that a bounceData packet which was previously broadcast is now determined to be invalid and should be discarded.
            examples:
                - address: 90:FD:9F:AC:9B:7F
                  sequenceNumber: 11
                  timeOfFlight: 1425
                  toFDelta: 45
                  impactTimestamp: 9072
                  isInvalid: false
        idle:
            type: object
            properties:
                event:
                    type: string
                    description: idle
                    const: idle
                data:
                    $ref: '#/components/schemas/idleData'
        idleData:
            type: object
            properties:
                address:
                    type: string
                    description: Unique sensor identifier.
                sequenceNumber:
                    type: integer
                    description: The order of the idle event relative to other events from the same sensor.
                idleTimestamp:
                    type: integer
                    description: Timestamp (ms) of the IDLE event.
            examples:
                - address: 90:FD:9F:AC:9B:7F
                  sequenceNumber: 12
                  impactTimestamp: 10352
        sensor-reset:
            type: object
            properties:
                event:
                    type: string
                    description: sensor-reset
                    const: sensor-reset
                data:
                    type: object
                    description: Placeholder for future development
                    const: null
        missing-data:
            type: object
            properties:
                event:
                    type: string
                    description: The app has detected it is missing some data from the sensors.
                    const: missing-data
                data:
                    $ref: '#/components/schemas/missingData'
        missingData:
            type: object
            properties:
                address:
                    type: string
                    description: Unique sensor identifier.
                missingSequenceNumbes:
                    type: array
                    description: List of currently missing sequence numbers. If this is empty it means that all previously missing packets have been found.
            examples:
                - address: 90:FD:9F:AC:9B:7F
                  missingSequenceNumbes: [8, 10]
        sensor-request:
            type: object
            properties:
                request:
                    type: string
                    description: sensor-list
                    const: sensor-list
        sensor-data:
            type: object
            properties:
                request:
                    type: string
                    description: sensor-details
                    const: sensor-details
                args:
                    type: string
                    description: The address of a known sensor. Use the sensor-list request to get a list of valid options.
            examples:
                - request: sensor-data
                  args: 90:FD:9F:AC:9B:7F
        sensor-list:
            type: object
            properties:
                event:
                    type: string
                    description: sensor-list
                    const: sensor-list
                data:
                    $ref: '#/components/schemas/sensorListData'
        sensorListData:
            type: object
            properties:
                sensors:
                    type: array
                    description: List of sensors that have been seen by the app while the Portal has been active.
            examples:
                - sensors: [90:FD:9F:AC:9B:7F, CC:CC:CC:9B:D8:FD]
        sensor-details:
            type: object
            properties:
                event:
                    type: string
                    description: sensor-details
                    const: sensor-details
                data:
                    $ref: '#/components/schemas/sensorDetailData'
        sensorDetailData:
            type: object
            properties:
                friendlyName:
                    type: string
                    description: User friendly name given to the sensor and displayed throughout Veriflite
                firmwareVersion:
                    type: string
                    description: Firmware version running on the sensor
                batteryLevel:
                    type: integer
                    description: Battery voltage in mV
                isPaired:
                    type: boolean
                    description: Whether the sensor is paired (and clock synced) with another sensor. Useful for synchro calculations.
                syncID:
                    type: integer
                    description: Given to a sensor for synchro pairing. Sensors will attempt to pair with others on the same sync ID.
                bootNumber:
                    type: integer
                    description: Number of times the sensor has been booted up in its lifetime.
                lifetimeJumps:
                    type: integer
                    description: Total number of bounce events sent by the sensor in its lifetime.
                lifetimeAge:
                    type: integer
                    description: Total time the sensor has been active in its lifetime, measured in seconds.
                uniqueID:
                    type: integer
                    description: A unique ID number for a given sensor.
                advertisingRate:
                    type: number
                    description: Rate at which packets from the sensor are received by the app - indicates the strength of the signal from the sensor to app.
                isHighPower:
                    type: boolean
                    description: Whether the sensor is in high power mode (sending out packets at a higher rate).
            examples:
                - friendlyName: Trampoline 1
                  firmwareVersion: '1.13.3'
                  batteryLevel: 1503
                  isPaired: false
                  syncID: -1
                  bootNumber: 173
                  lifetimeJumps: 4542
                  lifetimeAge: 188678
                  uniqueID: 844383776
                  advertisingRate: 13.0791388
                  isHighPower: false
        battery:
            type: object
            properties:
                event:
                    type: string
                    description: battery
                    const: battery
                data:
                    $ref: '#/components/schemas/batteryData'
        batteryData:
            type: object
            properties:
                address:
                    type: string
                    description: Unique sensor identifier.
                batteryLevel:
                    type: integer
                    description: Battery voltage in mV
            examples:
                - address: 90:FD:9F:AC:9B:7F
                  batteryLevel: 1503
        status-flags:
            type: object
            properties:
                event:
                    type: string
                    description: status-flags
                    const: status-flags
                data:
                    $ref: '#/components/schemas/statusFlagData'
        statusFlagData:
            type: object
            properties:
                address:
                    type: string
                    description: Unique sensor identifier.
                uniqueID:
                    type: integer
                    description: A unique ID number for a given sensor.
                firmwareVersion:
                    type: string
                    description: Firmware version running on the sensor.
                isHighPower:
                    type: boolean
                    description: Whether the sensor is in high power mode (sending out packets at a higher rate).
                bootNumber:
                    type: integer
                    description: Number of times the sensor has been booted up in its lifetime.
                lifetimeJumps:
                    type: integer
                    description: Total number of bounce events ever detected by the sensor.
                lifetimeAge:
                    type: integer
                    description: Total time the sensor has been active in its lifetime, measured in seconds.
            examples:
                - address: 90:FD:9F:AC:9B:7F
                  uniqueID: 844383776
                  firmwareVersion: 1.13.3
                  isHighPower: false
                  bootNumber: 134
                  lifetimeJumps: 4542
                  lifetimeAge: 188678
        display-name:
            type: object
            properties:
                event:
                    type: string
                    description: display-name
                    const: display-name
                data:
                    $ref: '#/components/schemas/displayNameData'
        displayNameData:
            type: object
            properties:
                address:
                    type: string
                    description: Unique sensor identifier.
                friendlyName:
                    type: string
                    description: User friendly name given to the sensor and displayed throughout Veriflite.
            examples:
                - address: 90:FD:9F:AC:9B:7F
                  friendlyName: Trampoline 1
